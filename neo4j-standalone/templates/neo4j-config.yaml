{{- $isEnterprise := required "neo4j.edition must be specified" .Values.neo4j.edition | regexMatch "(?i)enterprise" -}}
{{- $clusterEnabled := eq (include "neo4j.isClusterEnabled" .) "true" }}
{{- template "neo4j.checkLicenseAgreement" . -}}
# Neo4j config values that are required for neo4j to work correctly in Kubernetes, these are not overridden by user-provided values
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-k8s-config"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: "{{ template "neo4j.appName" $ }}"
    {{- include "neo4j.labels" $.Values.neo4j | indent 4 }}
data:
  server.default_listen_address: "0.0.0.0"
---
{{- $confFileName := "neo4j-community.conf" -}}
{{- if $isEnterprise }}
  {{- $confFileName = "neo4j-enterprise.conf" -}}
{{- end }}
{{- $confFile := .Files.Get $confFileName -}}
{{- $configImport := .Values.configImport -}}
# User-provided Neo4j config values
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-user-config"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: "{{ template "neo4j.appName" $ }}"
    {{- include "neo4j.labels" $.Values.neo4j | indent 4 }}
data:
  {{- /* imported config first */}}
  {{- with $configImport }}
  {{- if regexMatch "server\\.jvm\\.additional" . }}
    {{- fail "server.jvm.additional properties cannot be set in values.configImport. Set additional JVM arguments in values.jvm.additionalJvmArguments." }}
  {{- end }}
  {{- include "neo4j.configYaml" . | nindent 2 }}
  {{- end }}

  {{- /* then explicit config - throw an error if it contains jvm additional */}}

  {{- with .Values.config }}
  {{- if hasKey . "server.jvm.additional" }}
    {{- fail "server.jvm.additional properties cannot be set in values.config. Set additional JVM arguments in values.jvm.additionalJvmArguments" }}
  {{- end }}
  {{- range $key, $value := . }}
  {{- if not (kindIs "string" $value) }}
    {{- cat "config values must be strings." $key "value:" $value "type:" (kindOf $value) " (put values in double quotes so they are treated as strings in yaml)" | fail }}
  {{- end }}
  {{- end }}
  {{- toYaml . | nindent 2 }}
  {{- end }}

  {{- /* then default jvm config */}}
  {{- if .Values.jvm.useNeo4jDefaultJvmArguments | or .Values.jvm.additionalJvmArguments }}
  server.jvm.additional: |-
  {{- if .Values.jvm.useNeo4jDefaultJvmArguments }}{{ include "neo4j.configJvmAdditionalYaml" $confFile | indent 2 }}{{ end }}
  {{- range $ignored, $argument := .Values.jvm.additionalJvmArguments }}
  {{- trim $argument | replace "server.jvm.additional=" "" | trim | nindent 4 }}
  {{- end }}
  {{- end }}
---
# Default Neo4j config values, these are overridden by user-provided values in {{ .Release.Name }}-user-config
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-default-config"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: "{{ template "neo4j.appName" $ }}"
    {{- include "neo4j.labels" $.Values.neo4j | indent 4 }}
data:

  # Neo4j defaults
  {{- /* TODO: figure out how to use lookup to detect if there is an existing default configMap and require user to explicitly force overwrite */}}
  {{- include "neo4j.configYaml" $confFile | nindent 2 }}

  # Helm defaults
{{/*  #dbms.mode: "{{ index .Values.config "dbms.mode" | default "SINGLE" | upper }}"*/}}
{{/*  initial.server.mode_constraint: "{{ index .Values.config "initial.server.mode_constraint" | default "NONE" | upper }}"*/}}
{{/*  initial.dbms.default_primaries_count: "1"*/}}

  # Bolt keep alive
  # this helps to ensure that LoadBalancers do not close bolt connections that are in use but appear idle
  server.bolt.connection_keep_alive: "30s"
  server.bolt.connection_keep_alive_for_requests: "ALL"
  server.bolt.connection_keep_alive_streaming_scheduling_interval: "30s"

  # If we set default advertised address it over-rides the bolt address used to populate the browser in a really annoying way
  # dbms.default_advertised_address: "$(bash -c 'echo ${SERVICE_DOMAIN}')"

  {{- if $isEnterprise }}
  server.backup.listen_address: "0.0.0.0:6362"
  {{- end }}


  # Other
  internal.dbms.ssl.system.ignore_dot_files: "true"

  {{- if $clusterEnabled }}
  # Clustering
  #causal_clustering.discovery_type: K8S
  dbms.cluster.discovery.type: K8S
  #causal_clustering.kubernetes.service_port_name: "tcp-discovery"
  dbms.kubernetes.service_port_name: "tcp-discovery"
  #causal_clustering.kubernetes.label_selector: "app={{ template "neo4j.appName" . }},helm.neo4j.com/service=internals,helm.neo4j.com/dbms.mode=CORE"
  dbms.kubernetes.label_selector: "app={{ template "neo4j.appName" . }},helm.neo4j.com/service=internals"
  dbms.routing.default_router: "SERVER"
  dbms.routing.client_side.enforce_for_domains: "*.{{ .Values.clusterDomain }}"
  dbms.routing.enabled: "true"
  #causal_clustering.server_groups: "$(bash -c 'echo pod-${POD_NAME}'),{{ template "neo4j.cluster.server_groups" . }}"
  server.groups: "$(bash -c 'echo pod-${POD_NAME}'),{{ template "neo4j.cluster.server_groups" . }}"


  # Because "if we set default advertised address it over-rides the bolt address used to populate the browser in a really annoying way" we have to set the
  # advertised address for each cluster service individually instead
  server.bolt.advertised_address: "$(bash -c 'echo ${SERVICE_NEO4J}')"
  server.discovery.advertised_address: "$(bash -c 'echo ${SERVICE_NEO4J_INTERNALS}')"
  server.cluster.raft.advertised_address: "$(bash -c 'echo ${SERVICE_NEO4J_INTERNALS}')"
  server.cluster.advertised_address: "$(bash -c 'echo ${SERVICE_NEO4J_INTERNALS}')"
  server.routing.advertised_address: "$(bash -c 'echo ${SERVICE_NEO4J_INTERNALS}')"
  {{- end }}

  {{- if .Values.volumes.logs }}
  # Logging
  server.directories.logs: "/logs"
  {{- end }}

  {{- if $isEnterprise | and .Values.volumes.metrics }}
  # Metrics
  server.directories.metrics: "/metrics"
  {{- end }}

  {{- if .Values.volumes.import }}
  # Import
  server.directories.import: "/import"
  {{- end }}

  # Use more reliable defaults SSL / TLS settings for K8s
  dbms.ssl.policy.bolt.client_auth: "NONE"
  dbms.ssl.policy.https.client_auth: "NONE"

  {{- /* https and bolt+ssl specific settings */}}
  {{- if .Values.ssl.bolt.privateKey.secretName }}
  server.bolt.tls_level: "REQUIRED"
  {{- end }}

  {{- if .Values.ssl.https.privateKey.secretName }}
  server.https.enabled: "true"
  {{- end }}

  {{- range $name, $sslSpec := .Values.ssl }}
  {{- if $sslSpec.privateKey.secretName }}
  # Automatically enable SSL policy for {{ $name }} because privateKey secret is present
  dbms.ssl.policy.{{ $name }}.enabled: "true"
  {{- end }}
  {{- end }}
---
{{- if not (empty $.Values.apoc_config) -}}
# User-provided Neo4j Apoc config values
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-apoc-config"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: "{{ template "neo4j.appName" $ }}"
    {{- include "neo4j.labels" $.Values.neo4j | indent 4 }}
data:
  {{- with .Values.apoc_config }}
  apoc.conf: |-
    {{- if hasKey . "server.jvm.additional" }}
      {{- fail "server.jvm.additional properties cannot be set in values.apoc_config. Set additional JVM arguments in values.jvm.additionalJvmArguments" }}
    {{- end }}
    {{- range $key, $value := . }}
      {{- if not (kindIs "string" $value) }}
        {{- cat "config values must be strings." $key "value:" $value "type:" (kindOf $value) " (put values in double quotes so they are treated as strings in yaml)" | fail }}
      {{- end }}
     {{- printf "%s=%s" $key $value | nindent 6 }}
    {{- end }}
  {{- end }}
---
{{- end }}
